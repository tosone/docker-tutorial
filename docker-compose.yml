version: "3.9"

services:
  traefik:
    image: traefik:v2.7
    container_name: traefik
    hostname: traefik
    restart: always
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.ssh.address=:22
      - --entrypoints.websecure.address=:443
      - --entrypoints.influxdb.address=:2003
      - --entrypoints.mysql.address=:3306
      - --entrypoints.postgres.address=:5432
      - --entrypoints.redis.address=:6379
      - --entrypoints.mongo.address=:27017
      - --providers.docker
      - --api
      - --certificatesresolvers.leresolver.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
      - --certificatesresolvers.leresolver.acme.caserver=${LETSENCRYPT_CASERVER}
    ports:
      - 80:80
      - 22:22/tcp
      - 443:443
      - 2003:2003
      - 3306:3306
      - 5432:5432
      - 6379:6379
      - 27017:27017
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${VOLUME_PREFIX}/traefik/acme.json:/acme.json
    labels:
      - traefik.http.routers.traefik.rule=Host(`traefik${HOST_DOMAIN}`)
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.certresolver=leresolver
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.middlewares=authtraefik
      - traefik.http.middlewares.authtraefik.basicauth.users=tosone:$$apr1$$2DvxBXHm$$7iRM18fGqs30h2r0gDZK0/
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
  gitea-new:
    image: gitea/gitea:1.16-rootless
    container_name: gitea-new
    hostname: gitea-new
    restart: always
    volumes:
      - ${VOLUME_PREFIX}/gitea-new/data:/var/lib/gitea
      - ${VOLUME_PREFIX}/gitea-new/config:/etc/gitea
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - default
    labels:
      - traefik.http.routers.git-new.rule=Host(`git-new${HOST_DOMAIN}`)
      - traefik.http.routers.git-new.entrypoints=websecure
      - traefik.http.routers.git-new.tls=true
      - traefik.http.routers.git-new.tls.certresolver=leresolver
      - traefik.http.services=git-new
      - traefik.http.services.git-new.loadbalancer.server.port=3000
    depends_on:
      - minio
      - postgres
      - redis
      - traefik
  gitea:
    image: gitea/gitea:1.16
    container_name: gitea
    hostname: gitea
    environment:
      - USER_UID=1000
      - USER_GID=1000
    restart: always
    volumes:
      - ${VOLUME_PREFIX}/gitea:/data
    networks:
      - default
    labels:
      - traefik.http.routers.gitea.rule=Host(`git${HOST_DOMAIN}`)
      - traefik.http.routers.gitea.entrypoints=websecure
      - traefik.http.routers.gitea.tls=true
      - traefik.http.routers.gitea.tls.certresolver=leresolver
      - traefik.http.services=gitea
      - traefik.http.services.gitea.loadbalancer.server.port=3000
      - traefik.tcp.routers.ssh.rule=HostSNI(`*`)
      - traefik.tcp.routers.ssh.entrypoints=ssh
      - traefik.tcp.routers.ssh.service=ssh-svc
      - traefik.tcp.services.ssh-svc.loadbalancer.server.port=22
  gogs:
    image: gogs/gogs:latest
    container_name: gogs
    hostname: gogs
    environment:
      - USER_UID=1000
      - USER_GID=1000
    restart: always
    volumes:
      - ${VOLUME_PREFIX}/gogs:/data
    networks:
      - default
    labels:
      - traefik.http.routers.gogs.rule=Host(`gogs${HOST_DOMAIN}`)
      - traefik.http.routers.gogs.entrypoints=websecure
      - traefik.http.routers.gogs.tls=true
      - traefik.http.routers.gogs.tls.certresolver=leresolver
      - traefik.http.services=gogs
      - traefik.http.services.gogs.loadbalancer.server.port=3000
  drone-server:
    image: drone/drone:2
    container_name: drone-server
    hostname: drone-server
    environment:
      - DRONE_GITEA_SERVER=https://git${HOST_DOMAIN}
      - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}
      - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}
      - DRONE_RPC_SECRET=${SECRETPERSONAL}
      - DRONE_SERVER_HOST=drone${HOST_DOMAIN}
      - DRONE_SERVER_PROTO=https
      - DRONE_USER_CREATE=username:${USERNAME},admin:true
      - DRONE_GIT_ALWAYS_AUTH=true
      - DRONE_DATABASE_SECRET=cdfa565b5c147c0fad7832cb7ca9ddec
      - DRONE_DATABASE_DRIVER=postgres
      - DRONE_DATABASE_DATASOURCE=postgres://${USERNAME}:${SECRETPERSONAL}@postgres${HOST_DOMAIN}:5432/drone?sslmode=require
      - AWS_ACCESS_KEY_ID=${USERNAME}
      - AWS_SECRET_ACCESS_KEY=${SECRETPERSONAL}
      - AWS_REGION=cn-north-1
      - DRONE_S3_BUCKET=drone
      - DRONE_S3_ENDPOINT=https://minio${HOST_DOMAIN}
      - DRONE_S3_PATH_STYLE=true
    restart: always
    volumes:
      - ${VOLUME_PREFIX}/drone:/data
    labels:
      - traefik.http.routers.drone.rule=Host(`drone${HOST_DOMAIN}`)
      - traefik.http.routers.drone.entrypoints=websecure
      - traefik.http.routers.drone.tls=true
      - traefik.http.routers.drone.tls.certresolver=leresolver
      - traefik.http.services=drone
      - traefik.http.services.drone.loadbalancer.server.port=80
    depends_on:
      - minio
      - postgres
  drone-runner:
    image: drone/drone-runner-docker:1
    container_name: drone-runner
    hostname: drone-runner
    environment:
      - DRONE_RPC_PROTO=https
      - DRONE_RPC_HOST=drone${HOST_DOMAIN}
      - DRONE_RPC_SECRET=${SECRETPERSONAL}
      - DRONE_RUNNER_CAPACITY=10
      - DRONE_RUNNER_NAME=drone-runner
    restart: always
    ports:
      - 3000:3000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=false
  httpbin:
    image: kennethreitz/httpbin:latest
    container_name: httpbin
    hostname: httpbin
    restart: always
    networks:
      - default
    labels:
      - traefik.http.routers.httpbin.rule=Host(`httpbin${HOST_DOMAIN}`)
      - traefik.http.routers.httpbin.entrypoints=websecure
      - traefik.http.routers.httpbin.tls=true
      - traefik.http.routers.httpbin.tls.certresolver=leresolver
      - traefik.http.services=httpbin
      - traefik.http.services.httpbin.loadbalancer.server.port=80
  portainer:
    image: portainer/portainer:alpine
    container_name: portainer
    hostname: portainer
    restart: always
    command: -H unix:///var/run/docker.sock --admin-password $$2y$$05$$j4PJecT5XZtKH1NxK.2Jge/Rtv4x/Nfdd6qfrCOua0ledkZrlFZDq
    volumes:
      - ${VOLUME_PREFIX}/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - default
    labels:
      - traefik.http.routers.portainer.rule=Host(`portainer${HOST_DOMAIN}`)
      - traefik.http.routers.portainer.entrypoints=websecure
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.tls.certresolver=leresolver
      - traefik.http.services=portainer
      - traefik.http.services.portainer.loadbalancer.server.port=9000
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    hostname: watchtower
    restart: always
    command: redis traefik mongo drone-server drone-runner httpbin portainer phpmyadmin filebrowser jupyter mysql postgres influxdb chronograf netdata gitea gogs --interval 3600 --cleanup
    networks:
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    hostname: phpmyadmin
    restart: always
    networks:
      - default
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=mysql${HOST_DOMAIN}
      - PMA_USER=root
      - PMA_PASSWORD=${SECRETPERSONAL}
    labels:
      - traefik.http.routers.phpmyadmin.rule=Host(`phpmyadmin${HOST_DOMAIN}`)
      - traefik.http.routers.phpmyadmin.entrypoints=websecure
      - traefik.http.routers.phpmyadmin.tls=true
      - traefik.http.routers.phpmyadmin.tls.certresolver=leresolver
      - traefik.http.services=phpmyadmin
      - traefik.http.services.phpmyadmin.loadbalancer.server.port=80
  filebrowser:
    image: filebrowser/filebrowser:v2
    container_name: filebrowser
    hostname: filebrowser
    restart: always
    networks:
      - default
    volumes:
      - ${VOLUME_PREFIX}/filebrowser:/srv
    labels:
      - traefik.http.routers.filebrowser.rule=Host(`files${HOST_DOMAIN}`)
      - traefik.http.routers.filebrowser.entrypoints=websecure
      - traefik.http.routers.filebrowser.tls=true
      - traefik.http.routers.filebrowser.tls.certresolver=leresolver
      - traefik.http.services=filebrowser
      - traefik.http.services.filebrowser.loadbalancer.server.port=80
  jupyter:
    image: jupyter/all-spark-notebook:latest
    container_name: jupyter
    hostname: jupyter
    restart: always
    command: start-notebook.sh --NotebookApp.password="argon2:$$argon2id$$v=19$$m=10240,t=10,p=8$$DoWuJUvwfEFvHC12Z1a+RA$$ml8/PgtpaS4j5jQVmt7x3RciG+stPAs5nrLXeJQpyAw"
    networks:
      - default
    volumes:
      - ${VOLUME_PREFIX}/jupyter:/home/${USERNAME}
    environment:
      - NB_USER=${USERNAME}
    labels:
      - traefik.http.routers.jupyter.rule=Host(`jupyter${HOST_DOMAIN}`)
      - traefik.http.routers.jupyter.entrypoints=websecure
      - traefik.http.routers.jupyter.tls=true
      - traefik.http.routers.jupyter.tls.certresolver=leresolver
      - traefik.http.services=jupyter
      - traefik.http.services.jupyter.loadbalancer.server.port=8888
  mongo:
    image: mongo:5.0.6-focal
    container_name: mongo
    restart: always
    hostname: mongodb
    command: mongod --auth --nojournal
    environment:
      - MONGO_INITDB_DATABASE=${DATABASE_NAME}
      - MONGO_INITDB_ROOT_USERNAME=${USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${SECRETPERSONAL}
    volumes:
      - ${VOLUME_PREFIX}/mongo:/data/db
    labels:
      - traefik.tcp.routers.mongo.rule=HostSNI(`*`)
      - traefik.tcp.routers.mongo.entrypoints=mongo
      - traefik.tcp.routers.mongo.service=mongo-svc
      - traefik.tcp.services.mongo-svc.loadbalancer.server.port=27017
  mysql:
    image: mysql:8-debian
    container_name: mysql
    restart: always
    hostname: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${SECRETPERSONAL}
      - MYSQL_USER=${USERNAME}
      - MYSQL_PASSWORD=${SECRETPERSONAL}
      - MYSQL_DATABASE=${DATABASE_NAME}
    volumes:
      - ${VOLUME_PREFIX}/mysql:/var/lib/mysql
    labels:
      - traefik.tcp.routers.mysql.rule=HostSNI(`*`)
      - traefik.tcp.routers.mysql.entrypoints=mysql
      - traefik.tcp.routers.mysql.service=mysql-svc
      - traefik.tcp.services.mysql-svc.loadbalancer.server.port=3306
  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    hostname: redis
    command: redis-server --requirepass ${SECRETPERSONAL}
    volumes:
      - ${VOLUME_PREFIX}/redis:/data
    labels:
      - traefik.tcp.routers.redis.rule=HostSNI(`*`)
      - traefik.tcp.routers.redis.entrypoints=redis
      - traefik.tcp.routers.redis.service=redis-svc
      - traefik.tcp.services.redis-svc.loadbalancer.server.port=6379
  postgres:
    image: postgres:alpine
    container_name: postgres
    hostname: postgres
    restart: always
    environment:
      - POSTGRES_USER=${USERNAME}
      - POSTGRES_PASSWORD=${SECRETPERSONAL}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
      - ${VOLUME_PREFIX}/postgres:/var/lib/postgresql/data
      - ${VOLUME_PREFIX}/key/postgres/server.crt:/var/lib/postgresql/server.crt:ro
      - ${VOLUME_PREFIX}/key/postgres/server.key:/var/lib/postgresql/server.key:ro
    command:
      [
        "postgres",
        "-c",
        "ssl=on",
        "-c",
        "ssl_cert_file=/var/lib/postgresql/server.crt",
        "-c",
        "ssl_key_file=/var/lib/postgresql/server.key",
      ]
    labels:
      - traefik.tcp.routers.postgres.rule=HostSNI(`*`)
      - traefik.tcp.routers.postgres.entrypoints=postgres
      - traefik.tcp.routers.postgres.service=postgres-svc
      - traefik.tcp.services.postgres-svc.loadbalancer.server.port=5432
  influxdb:
    image: influxdb:alpine
    container_name: influxdb
    hostname: influxdb
    restart: always
    environment:
      - INFLUXDB_GRAPHITE_ENABLED=true
      - INFLUXDB_HTTP_AUTH_ENABLED=true
      - INFLUXDB_ADMIN_USER=${USERNAME}
      - INFLUXDB_ADMIN_PASSWORD=${SECRETPERSONAL}
      - INFLUXDB_USER=${USERNAME}-user
      - INFLUXDB_USER_PASSWORD=${SECRETPERSONAL}
      - INFLUXDB_DB=${DATABASE_NAME}
    volumes:
      - ${VOLUME_PREFIX}/influxdb:/var/lib/influxdb
    networks:
      - default
    labels:
      - traefik.http.routers.influxdb.rule=Host(`influxdb${HOST_DOMAIN}`)
      - traefik.http.routers.influxdb.entrypoints=websecure
      - traefik.http.routers.influxdb.tls=true
      - traefik.http.routers.influxdb.tls.certresolver=leresolver
      - traefik.http.services=influxdb
      - traefik.http.services.influxdb.loadbalancer.server.port=8086
      - traefik.tcp.routers.influxdb.rule=HostSNI(`influxdb${HOST_DOMAIN}`)
      - traefik.tcp.routers.influxdb.rule=HostSNI(`*`)
      - traefik.tcp.routers.influxdb.entrypoints=influxdb
      - traefik.tcp.routers.influxdb.service=influxdb-svc
      - traefik.tcp.services.influxdb-svc.loadbalancer.server.port=2003
  chronograf:
    image: chronograf:alpine
    container_name: chronograf
    hostname: chronograf
    restart: always
    volumes:
      - ${VOLUME_PREFIX}/chronograf:/var/lib/chronograf
    networks:
      - default
    labels:
      - traefik.http.routers.chronograf.rule=Host(`chronograf${HOST_DOMAIN}`)
      - traefik.http.routers.chronograf.entrypoints=websecure
      - traefik.http.routers.chronograf.tls=true
      - traefik.http.routers.chronograf.tls.certresolver=leresolver
      - traefik.http.services=chronograf
      - traefik.http.services.chronograf.loadbalancer.server.port=8888
  frps:
    image: docker-tutorial:frps
    build:
      context: frp/frps
      dockerfile: Dockerfile
    container_name: frps
    hostname: frps
    restart: always
    network_mode: host
    labels:
      - traefik.enable=false
  frpc:
    image: docker-tutorial:frpc
    build:
      context: frp/frpc
      dockerfile: Dockerfile
    container_name: frpc
    hostname: frpc
    restart: always
    network_mode: host
    labels:
      - traefik.enable=false
  netdata:
    image: netdata/netdata:latest
    container_name: netdata
    restart: always
    hostname: netdata
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - default
    labels:
      - traefik.http.routers.netdata.rule=Host(`netdata${HOST_DOMAIN}`)
      - traefik.http.routers.netdata.entrypoints=websecure
      - traefik.http.routers.netdata.tls=true
      - traefik.http.routers.netdata.tls.certresolver=leresolver
      - traefik.http.services=netdata
      - traefik.http.services.netdata.loadbalancer.server.port=19999
  shadowsocks-proxy:
    image: shadowsocks-proxy:dev
    container_name: shadowsocks-proxy
    hostname: shadowsocks-proxy
    restart: always
    build: $PWD/shadowsocks-proxy
    ports:
      - ${SHADOWSOCKS_PORT}:${SHADOWSOCKS_PORT}
    labels:
      - traefik.enable=false
  shadowsocks:
    image: shadowsocks/shadowsocks-libev:latest
    container_name: shadowsocks
    restart: always
    hostname: shadowsocks
    environment:
      - METHOD=chacha20-ietf-poly1305
      - PASSWORD=${SECRETPERSONAL}
    ports:
      - ${SHADOWSOCKS_PORT}:8388
    labels:
      - traefik.enable=false
  registry:
    image: registry:2
    container_name: registry
    restart: always
    hostname: registry
    networks:
      - default
    volumes:
      - ${VOLUME_PREFIX}/registry:/var/lib/registry
      - $PWD/registry/auth:/etc/registry:ro
      - $PWD/registry/config.yaml:/etc/docker/registry/config.yml
    labels:
      - traefik.http.routers.registry.rule=Host(`hub${HOST_DOMAIN}`)
      - traefik.http.routers.registry.entrypoints=websecure
      - traefik.http.routers.registry.tls=true
      - traefik.http.routers.registry.tls.certresolver=leresolver
      - traefik.http.services=registry
      - traefik.http.services.registry.loadbalancer.server.port=5000
    depends_on:
      - redis
networks:
  default:
    name: ${DOCKER_NETWORK:-webproxy}
